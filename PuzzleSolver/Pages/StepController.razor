@using Algorithms
@using System.Reflection
@typeparam TInput

<PageTitle>@title</PageTitle>

<h1>@title</h1>

<input type="range" id="delayRange" @bind=delay min="0" max="1000">
<div class="my-4">
    <span class="p-2 rounded bg-light">@(delay == 0 ? "Fastest" : delay == 1000 ? "Animation Stopped" : $"Run a step every {delay} ms")</span>
</div>
    @if (Input is not null)
{
    @if (isProcessing)
    {
        <div>
            <button class="btn btn-primary" @onclick="(e) => { cts?.Cancel();}">Cancel</button>
        </div>
    }
    else
    {
        <div>
                <button class="btn btn-primary" @onclick="(e) => StartSolving()">Solve</button>
        </div>
    }
}
@if (Solution is not null)
{
    <p class="p-2" role="status">Solution: @Solution.Solution</p>
    if (ChildContent is not null)
    {
        @ChildContent((delay, iteration))
    }
}

@code {
    [Parameter]
    public TInput? Input { get; set; }
    [Parameter]
    public ISolution<TInput>? Solution { get; set; }
    [Parameter]
    public RenderFragment<(int Delay, int Iteration)>? ChildContent { get; set; }

    private string title => Solution is null ? string.Empty : PuzzleHelper.GetPuzzleTitle(Solution.GetType());
    //    private List<(string Name, Func<TInput, IEnumerable<Func<TSolution>>> Method)> methods = PuzzleHelper.GetPuzzleMethods<TInput, TSolution>(typeof(TSolutions));
    private int delay = 500;
    private bool isProcessing;
    private CancellationTokenSource? cts;
    private int iteration;

    private async Task StartSolving()
    {
        cts = new CancellationTokenSource();
        var token = cts.Token;
        await Solve(token);
        StateHasChanged();
    }

    private async Task Solve(CancellationToken token)
    {
        isProcessing = true;
        iteration = 0;
        Solution!.Start(Input!);
        StateHasChanged();
        await Task.Delay(1);
        while (Solution.Solution is null)
        {
            Solution.Update();
            iteration++;
            if (delay > 0)
            {
                StateHasChanged();
                await Task.Delay(delay);
                if (token.IsCancellationRequested)
                    break;
            }
        }
        isProcessing = false;
    }
}
