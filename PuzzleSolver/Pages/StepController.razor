@using Algorithms
@using System.Reflection
@typeparam TInput
@typeparam TState where TState : StateBase
@typeparam TSolutions

<PageTitle>@title</PageTitle>

<h1>@title</h1>

<input type="range" id="delayRange" @bind=delay min="0" max="1000">
<div class="my-4">
    <span class="p-2 rounded bg-light">@(delay == 0 ? "Fastest" : delay == 1000 ? "Animation Stopped" : $"Run a step every {delay} ms")</span>
</div>
    @if (Input is not null)
    {
    @if (isProcessing)
    {
        <div>
            <button class="btn btn-primary" @onclick="(e) => { cts?.Cancel();}">Cancel</button>
        </div>
    } else
    {
        <div>
            @foreach (var method in methods)
            {
                <button class="btn btn-primary" @onclick="(e) => StartSolving(method.Method)">Solve @method.Name</button>
            }
        </div>
    }
}
@if (state is not null)
{
    <p class="p-2" role="status">Solution: @state.Message</p>
    if ( ItemTemplate is not null)
    {
        @ItemTemplate((delay, iteration, state))
    }
}

@code {
    [Parameter]
    public TInput? Input { get; set; }
    [Parameter]
    public RenderFragment<(int Delay, int Iteration, TState State)>? ItemTemplate { get; set; }

    private string title = PuzzleHelper.GetPuzzleTitle(typeof(TSolutions));
    private List<(string Name, Func<TInput, IEnumerable<TState>> Method)> methods = PuzzleHelper.GetPuzzleMethods<TInput, TState>(typeof(TSolutions));
    private TState? state;
    private int delay = 500;
    private bool isProcessing;
    private CancellationTokenSource? cts;
    private int iteration;

    private async Task StartSolving(Func<TInput, IEnumerable<TState>> part)
    {
        cts = new CancellationTokenSource();
        var token = cts.Token;
        await Solve(part(Input!), token);
        StateHasChanged();
    }

    private async Task Solve(IEnumerable<TState> steps,CancellationToken token)
    {
        isProcessing = true;
        iteration = 0;
        foreach (var s in steps)
        {
            iteration++;
            state = s;
            if (delay > 0)
            {
                StateHasChanged();
                await Task.Delay(delay);
                if (token.IsCancellationRequested)
                {
                    state.Message = "Processing Cancelled";
                    break;
                }
            }
        }
        isProcessing = false;
    }
}
