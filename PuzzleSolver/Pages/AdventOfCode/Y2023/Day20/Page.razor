@page "/AdventOfCode/Y2023/Day20"
@using Algorithms.AdventOfCode
@using Algorithms.AdventOfCode.Y2023.Day20
@using System.Reflection
@inject HttpClient Http

<PageTitle>@title</PageTitle>

<h1>@title</h1>

<input type="range" id="delayRange" @bind=animationDuration min="0" max="1000">
<div class="my-4">
    <span class="p-2 rounded bg-light">@(animationDuration == 0 ? "Fastest" : animationDuration == 1000 ? "Animation Stopped" : $"Run a step every {animationDuration} ms")</span>
</div>

@if (input != string.Empty)
@foreach (var method in methods)
{
    <button class="btn btn-primary" @onclick="(e) => Solve(method.Method)">Solve @method.Name</button>
}

<p class="p-2" role="status">Solution: @solution</p>

@code {
    private string title = PuzzleHelper.GetPuzzleTitle(typeof(Solutions));
    private List<(string Name, Func<Input, IEnumerable<State>> Method)> methods = PuzzleHelper.GetPuzzleMethods<Input, State>(typeof(Solutions));

    private string input = string.Empty;
    private string solution = string.Empty;
    private int animationDuration = 500;

    protected override async Task OnInitializedAsync()
    {
        // await Task.Delay(5000);
        var s = await Http.GetStringAsync($"sample-data/AdventOfCode/Y2023/Day20/{title.Replace(" ","")}_full.txt");
        input = s.Replace("\r", "");

    }

    private async void Solve(Func<Input, IEnumerable<State>> part)
    {
        foreach (var state in  part(Parser.Parse(input)))
        {
            solution = state.Message;
            if (animationDuration > 0)
            {
                StateHasChanged();
                await Task.Delay(animationDuration);
            }
        }
        StateHasChanged();
    }
}
