@using Algorithms
@using Algorithms.Bonus.Sudoku
<Grid>
    @{
        var cell = grid[context.x + context.y * 9];
        var previousCell = previousGrid[context.x + context.y * 9];
        var inputCell = input[context.x + context.y * 9];
    }
    @if (cell != '.')
    {
        var fcolor = "red";
        if (cell == inputCell)
            fcolor = "black";
        else if (cell == previousCell)
            fcolor = "gray";

        <g transform="translate(.5,.56)">
            <text font-family="Comic Sans" font-size=".8" dominant-baseline="middle" text-anchor="middle" fill="@fcolor">@cell</text>
        </g>
    }
</Grid>
}

@code {
    [Parameter]
    public State? State { get; set; }
    [Parameter]
    public Input? Input { get; set; }
    private string[] dfs = Array.Empty<string>();

    private string grid = new string('.', 81);
    private string previousGrid = new string('.', 81);
    private string input = new string('.', 81);

    protected override void OnParametersSet()
    {
        dfs = State!.Queue.ToArray();
        previousGrid = grid;
        grid = State.Grid;
        input = Input!.Grid;
        base.OnParametersSet();
    }

}
