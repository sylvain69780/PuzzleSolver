@using Algorithms
@using System.Reflection
@using System.Diagnostics
@typeparam TInput

<p>@title</p>

    @if (Input is not null)
{
    @if (Solution!.IsRunning && ( ! cts?.Token.IsCancellationRequested ?? false))
    {
        <div>
            <button class="btn btn-primary" @onclick="(e) => { cts?.Cancel();}">
             <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Iteration @Solution.Iteration ... Cancel
            </button>
        </div>
    }
    else
    {
        <div>
            @if (Solution?.Solution is not null)
            {
                <span class="border rounded p-2">@($"Solution found is {Solution.Solution}")</span>
            }
            <button class="btn btn-primary" @onclick="(e) => StartSolving()">
                @(Solution?.Solution is not null ? "Restart" : "Start")
            </button>
        </div>
    }
}
@if (Solution is not null && ChildContent is not null)
{
    @ChildContent(Solution)
}

@code {
    [Parameter]
    public int Delay { get; set; }
    [Parameter]
    public TInput? Input { get; set; }
    [Parameter]
    public ISolutionFinder<TInput>? Solution { get; set; }
    [Parameter]
    public RenderFragment<ISolutionFinder<TInput>>? ChildContent { get; set; }
    [Parameter]
    public EventCallback OnValueChanged { get; set; }

    private string title => Solution is null ? string.Empty : PuzzleHelper.GetPuzzleTitle(Solution.GetType());
    private CancellationTokenSource? cts;
    private System.Timers.Timer? _timer;

    private void StartSolving()
    {
        Solution!.Start(Input!);
        cts = new CancellationTokenSource();
        _timer = new(Delay);
        _timer.Elapsed += Solve;
        _timer.AutoReset = true;
        _timer.Enabled = true;
        _timer.Start();
    }

    private void Solve(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (Solution!.IsRunning == false || cts!.Token.IsCancellationRequested)
        {
            _timer!.Enabled = false;
        }
        else
        {
            if (Delay == 0)
            {
                var stopwatch = Stopwatch.StartNew();
                while (Solution.IsRunning && stopwatch.ElapsedMilliseconds < 1000)
                    Solution.Update();
            } else
            {
                Solution.Update();
            }
        }
        OnValueChanged.InvokeAsync();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Delay >0 && _timer is not null)
            _timer.Interval = Delay;

    }

}
